package config

import (
	"fmt"
	"testing"
)

var base =  map[string]interface {}{"bedrock":map[string]interface {}{"gateways":map[string]interface {}{"default":map[string]interface {}{"listeners":map[string]interface {}{"default":map[string]interface {}{"bind":"0.0.0.0:19132"}}}}, "servers":map[string]interface {}{"default":map[string]interface {}{"address":"example.com:19132", "domains":[]interface {}{"*"}, "gateways":[]interface {}{"default"}}}}, "defaults":map[string]interface {}{"bedrock":map[string]interface {}{"gateway":map[string]interface {}{"listener":map[string]interface {}{"compression":"flate", "pingStatus":map[string]interface {}{"edition":"MCPE", "gameMode":"SURVIVAL", "gameModeNumeric":1, "maxPlayerCount":10, "motd":"Powered by Infrared\nJoin!\n", "playerCount":0, "protocolVersion":491, "versionName":"1.18.20.23"}}, "serverNotFoundMessage":"Sorry {{username}}, but a server for {{serverDomain}} does not exist."}, "server":map[string]interface {}{"dialTimeout":"1s", "dialTimeoutMessage":"Sorry {{username}}, but the server is not reachable."}}, "java":map[string]interface {}{"gateway":map[string]interface {}{"listener":map[string]interface {}{"serverNotFoundMessage":"Sorry {{username}}, but {{serverDomain}} was not found.", "serverNotFoundStatus":map[string]interface {}{"iconPath":"icons/default.png", "maxPlayerCount":0, "motd":"Powered by Infrared\n§c{{serverDomain}} was not found.\n", "playerCount":0, "protocolNumber":0, "versionName":"Infrared"}}}, "server":map[string]interface {}{"dialTimeout":"1s", "dialTimeoutMessage":"Sorry {{username}}, but the server is not reachable.", "dialTimeoutStatus":map[string]interface {}{"iconPath":"icons/default.png", "maxPlayerCount":0, "motd":"Powered by Infrared\n§6Server at {{serverDomain}} is not responding.", "playerCount":0, "protocolNumber":0, "versionName":"Infrared"}, "overrideAddress":true}}}, "java":map[string]interface {}{"gateways":map[string]interface {}{"default":map[string]interface {}{"listeners":map[string]interface {}{"default":map[string]interface {}{"bind":":25565"}}}}, "servers":map[string]interface {}{"default":map[string]interface {}{"address":"example.com:25565", "domains":[]interface {}{"*"}, "gateways":[]interface {}{"default"}, "overrideStatus":map[string]interface {}{"maxPlayerCount":777777777, "playerCount":2, "versionName":"Infrared"}}}}}
var other = map[string]interface {}{"api":map[string]interface {}{"allowedOrigins":[]interface {}{"http://*", "https://*"}, "bind":":8080"}, "bedrock":map[string]interface {}{"chanCap":map[string]interface {}{"connPool":10, "connProcessor":100, "server":100}, "processingNode":map[string]interface {}{"clientTimeout":"1000ms", "count":10}}, "defaults":map[string]interface {}{"webhook":map[string]interface {}{"dialTimeout":"1s"}}, "java":map[string]interface {}{"chanCaps":map[string]interface {}{"connPool":10, "connProcessor":100, "server":100}, "processingNode":map[string]interface {}{"clientTimeout":"300ms", "count":10}}, "prometheus":map[string]interface {}{"bind":":9070"}, "providers":map[string]interface {}{"docker":map[string]interface {}{"clientTimeout":"3s", "endpoint":"unix:///var/run/docker.sock", "labelPrefix":"infrared.", "network":"infrared", "watch":true}, "file":map[string]interface {}{"directory":"./proxies", "watch":true}}}
var result = map[string]interface {}{"api":map[string]interface {}{"allowedOrigins":[]interface {}{"http://*", "https://*"}, "bind":":8080"}, "bedrock":map[string]interface {}{"chanCap":map[string]interface {}{"connPool":10, "connProcessor":100, "server":100}, "gateways":map[string]interface {}{"default":map[string]interface {}{"listeners":map[string]interface {}{"default":map[string]interface {}{"bind":"0.0.0.0:19132"}}}}, "processingNode":map[string]interface {}{"clientTimeout":"1000ms", "count":10}, "servers":map[string]interface {}{"default":map[string]interface {}{"address":"example.com:19132", "domains":[]interface {}{"*"}, "gateways":[]interface {}{"default"}}}}, "defaults":map[string]interface {}{"bedrock":map[string]interface {}{"gateway":map[string]interface {}{"listener":map[string]interface {}{"compression":"flate", "pingStatus":map[string]interface {}{"edition":"MCPE", "gameMode":"SURVIVAL", "gameModeNumeric":1, "maxPlayerCount":10, "motd":"Powered by Infrared\nJoin!\n", "playerCount":0, "protocolVersion":491, "versionName":"1.18.20.23"}}, "serverNotFoundMessage":"Sorry {{username}}, but a server for {{serverDomain}} does not exist."}, "server":map[string]interface {}{"dialTimeout":"1s", "dialTimeoutMessage":"Sorry {{username}}, but the server is not reachable."}}, "java":map[string]interface {}{"gateway":map[string]interface {}{"listener":map[string]interface {}{"serverNotFoundMessage":"Sorry {{username}}, but {{serverDomain}} was not found.", "serverNotFoundStatus":map[string]interface {}{"iconPath":"icons/default.png", "maxPlayerCount":0, "motd":"Powered by Infrared\n§c{{serverDomain}} was not found.\n", "playerCount":0, "protocolNumber":0, "versionName":"Infrared"}}}, "server":map[string]interface {}{"dialTimeout":"1s", "dialTimeoutMessage":"Sorry {{username}}, but the server is not reachable.", "dialTimeoutStatus":map[string]interface {}{"iconPath":"icons/default.png", "maxPlayerCount":0, "motd":"Powered by Infrared\n§6Server at {{serverDomain}} is not responding.", "playerCount":0, "protocolNumber":0, "versionName":"Infrared"}, "overrideAddress":true}}, "webhook":map[string]interface {}{"dialTimeout":"1s"}}, "java":map[string]interface {}{"chanCaps":map[string]interface {}{"connPool":10, "connProcessor":100, "server":100}, "gateways":map[string]interface {}{"default":map[string]interface {}{"listeners":map[string]interface {}{"default":map[string]interface {}{"bind":":25565"}}}}, "processingNode":map[string]interface {}{"clientTimeout":"300ms", "count":10}, "servers":map[string]interface {}{"default":map[string]interface {}{"address":"example.com:25565", "domains":[]interface {}{"*"}, "gateways":[]interface {}{"default"}, "overrideStatus":map[string]interface {}{"maxPlayerCount":777777777, "playerCount":2, "versionName":"Infrared"}}}}, "prometheus":map[string]interface {}{"bind":":9070"}, "providers":map[string]interface {}{"docker":map[string]interface {}{"clientTimeout":"3s", "endpoint":"unix:///var/run/docker.sock", "labelPrefix":"infrared.", "network":"infrared", "watch":true}, "file":map[string]interface {}{"directory":"./proxies", "watch":true}}}

func TestMergeConfigs(t *testing.T) {
	merged, err := MergeConfigs(base, other)
	if err != nil {
		t.Fatal(err)
	}

	if fmt.Sprintf("%v", result) != fmt.Sprintf("%v", merged) {
		t.Fatal("string representations of maps are not equal")
	}
}

